Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

==================================

use a hashset to record the visited postion

Solution:

public class Solution {
    public boolean exist(char[][] board, String word) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(board == null || board.length == 0){
            return false;
        }
        for(int i = 0 ; i < board.length; i++){
            for(int j = 0 ; j < board[0].length; j++){
                HashSet<Integer> visited = new HashSet<Integer>();
                if(dfs(board,word,0,i,j,visited)){return true;}
            }
        }
        return false;
    }
    
    boolean dfs(char[][] board,String word,int len,int i , int j,HashSet<Integer> visited){
        if(len == word.length()){return true;}
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length){
            return false;
        }
        if(board[i][j] != word.charAt(len) || visited.contains(i * board[0].length + j)){
            return false;
        }else {
            visited.add(i * board[0].length + j);
            //search left
            return dfs(board,word,len+1,i-1,j,visited) ||
                    dfs(board,word,len+1,i,j-1,visited) ||
                    dfs(board,word,len+1,i+1,j,visited)||
                    dfs(board,word,len+1,i,j+1,visited);
        }
    }
}