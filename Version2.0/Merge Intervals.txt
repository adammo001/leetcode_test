Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].



=========================================================

Complexity: O(nlogn)

please take care that next interval maybe contains in the previous one
[6,15], [8,13]

Solution:

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    
    class comparetor implements Comparator<Interval>{
        @Override
        public int compare(Interval o1,Interval o2){
            if(o1.start > o2.start){
                return 1;
            }else if(o1.start == o2.start){
                return 0;
            }else{
                return -1;
            }
        }
    }
    
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<Interval> res = new ArrayList<Interval>();
        if(intervals.size() == 0){
            return res;
        }
        Collections.sort(intervals,new comparetor());
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for(int i = 0 ; i < intervals.size();i++){
            if(intervals.get(i).start <= end){
                end = Math.max(end,intervals.get(i).end);
            }else{
                res.add(new Interval(start,end));
                start = intervals.get(i).start;
                end = intervals.get(i).end;
            }
        }
        res.add(new Interval(start,end));
        return res;
    }
}