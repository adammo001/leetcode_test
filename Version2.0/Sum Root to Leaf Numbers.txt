Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

==================================



be careful : if node have one subtree. we should only add this subtree to final result
such as  

    1
   / 
  2  

result = 12 , not 12 + 1 

 

Solution:


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    class sum{
        int res = 0;
    }
    public int sumNumbers(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        sum res = new sum();
        dfs(root,0,res);
        return res.res;        
    }
    
    void dfs(TreeNode node,int last,sum res){
        if(node == null){
            res.res += last;
            return;
        }
        if(node.left == null && node.right == null){
            res.res += last * 10 + node.val;
            return;
        }
        if(node.left != null){
            dfs(node.left,last*10 + node.val,res);
        }
        if(node.right != null){
            dfs(node.right,last * 10+node.val,res);
        }
        
    }
}