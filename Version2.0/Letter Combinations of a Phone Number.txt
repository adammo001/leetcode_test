Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.
Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

===========================

when input is "" output should be "" too.

Solutions:

public class Solution {
    public ArrayList<String> letterCombinations(String digits) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<String> res = new ArrayList<String>();
        if(digits.length() == 0){
            res.add("");
            return res;
        }
        String[] words = new String[]{"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        dfs(digits,0,"",res,words);
        return res;
    }
    
    void dfs(String digits,int index,String add,ArrayList<String> res,String[] words){
        if(index == digits.length()){
            res.add(add);
            return;
        }
        String word = words[digits.charAt(index) - '0' - 2];
        for(int i = 0 ; i < word.length(); i++){
            dfs(digits,index+1,add+word.charAt(i),res,words);    
        }        
    }
}