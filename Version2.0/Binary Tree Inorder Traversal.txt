Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?


=======================
iterative solution is interesting.

Solutions:

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(root == null){
            return res;
        }
        inOrder(root,res);
        return res;
    }
    
    //iterative solution
    void inOrder(TreeNode node,ArrayList<Integer> res){
        Stack<TreeNode> sts = new Stack<TreeNode>();
        TreeNode cur = node;
        while(!sts.empty() || cur != null){
            if(cur != null){
                sts.push(cur);
                cur = cur.left;
            }else{
                cur = sts.pop();
                res.add(cur.val);
                cur = cur.right;
            }
        }
    }
    
    // reccurence solution
    void inorder(TreeNode node,ArrayList<Integer> res){
        if(node == null){
            return;
        }
        inorder(node.left,res);
        res.add(node.val);
        inorder(node.right,res);
    } 
}