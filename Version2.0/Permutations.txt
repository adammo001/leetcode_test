Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

====================================


Solution:

public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if(num == null || num.length == 0){
            return res;
        }
        ArrayList<Integer> adds = new ArrayList<Integer>();
        dfs(num,0,adds,res);
        return res;
    }
    
    void dfs(int[] num, int index, ArrayList<Integer> adds,ArrayList<ArrayList<Integer>> res){
        if(index == num.length){
            res.add(new ArrayList<Integer>(adds));
            return;
        }
        for(int i = index; i < num.length; i++){
            swap(num,index,i);
            adds.add(num[index]);
            dfs(num,index+1,adds,res);
            swap(num,index,i);
            adds.remove(adds.size() -1);
        }
    }
    
    void swap(int[] num, int ia, int ib){
        int tmp = num[ia];
        num[ia] = num[ib];
        num[ib] = tmp;
    }
}