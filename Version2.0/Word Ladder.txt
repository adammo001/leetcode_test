Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

==========================================================

Complexity: not clear

use BFS to find the result, use a hashset to record the visited string

Solutions:

public class Solution {
    public int ladderLength(String start, String end, HashSet<String> dict) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(start.equals(end)){
            return 2;
        }
        HashSet<String> visited = new HashSet<String>();
        Queue<String> ques = new LinkedList<String>();
        Queue<Integer> counts = new LinkedList<Integer>();
        ques.add(start);
        counts.add(1);
        
        while(ques.peek() != null){
            String str = ques.poll();
            int count = counts.poll();
            
            for(int i = 0 ; i < str.length(); i++){
                for(int j = 0 ; j < 26 ; j++){
                    if('a' + j == str.charAt(i)){continue;}
                    char[] atts = str.toCharArray();
                    atts[i] = (char)('a' + j);
                    String nstr = new String(atts);
                    if(nstr.equals(end)){
                        return count+1;    
                    }
                    if(!dict.contains(nstr) || visited.contains(nstr)){continue;}
                    ques.add(nstr);
                    counts.add(count + 1);
                    visited.add(nstr);
                }
            }
        }
        return 0;
    }
}