A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

===========================

Complexity: O(n)

Solution:

public class Solution {
    class res {
        int res = 0;
    }
    public int numDecodings(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(s.length() <= 1){
            return s.equals("0")?0:s.length();
        }
        int n = s.length();
        int[] res = new int[n+1];
        res[0] = 1;
        for(int i = 1; i <= n ; i++){
            int n1 = 0;
            if(s.charAt(i-1) != '0'){
                n1 = res[i-1];
            }
            int n2 = 0;
            if(i >= 2 && (s.charAt(i -2) == '1' || s.charAt(i -2) == '2' && s.charAt(i - 1) < '7')){
                n2 = res[i-2];
            }
            res[i] = n1 + n2;
        }
        return res[n];
    }
    
    
    // can't pass large set
    int solveDfs(String s){
        if(s.length() == 0){
            return 0;
        }
        res res = new res();
        dfs(s,0,res);
        return res.res;
    }
    
    void dfs(String s, int index, res res){
       if(index == s.length()){
            res.res++;
            return;
       } 
       if(s.charAt(index) == '0'){
           return;
       }
       if(index != s.length() -1){
           if(s.charAt(index + 1) == '0'){
               if(s.charAt(index) < '3'){
                   dfs(s,index+2,res);
               }else{
                   return;
               }
           }else if(valid(s,index)){
               dfs(s,index+2,res);               
           }
       }
       dfs(s,index+1,res);
    }
    
    boolean valid(String s, int index){
        if(s.charAt(index) <='2' && s.charAt(index + 1) < '7'){return true;}
        return false;
    }
}