Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,

There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.

============================================

can't use one array to record the result.
in the initialization, for first row and first column, if meet one 1, rest will be 0.

Solution:

public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(obstacleGrid.length == 0 || obstacleGrid[0].length == 0){
            return 0;
        }
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] res = new int[n][m];
        for(int i = 0 ; i < m ; i++){
            if(obstacleGrid[0][i] == 0){
                res[0][i] = 1;
            }else{
                break;
            }
        }
        for(int i = 0 ; i < n; i++){
            if(obstacleGrid[i][0] == 0){
                res[i][0] = 1;
            }else{
                break;
            }
        }
        for(int i = 1 ; i < n;i++){
            for(int j = 1; j < m; j++){
                if(obstacleGrid[i][j] == 1){
                    res[i][j] = 0;
                }else{
                    res[i][j] = res[i][j-1] + res[i-1][j];
                }
            }
        }
        return res[n-1][m-1];
    }
}