Determine whether an integer is a palindrome. Do this without extra space.

Some hints:
Could negative integers be palindromes? (ie, -1)

If you are thinking of converting the integer to string, note the restriction of using extra space.

You could also try reversing an integer. However, if you have solved the problem "Reverse Integer", you know that the reversed integer might overflow. How would you handle such case?

There is a more generic way of solving this problem.


==============================================

public class Solution {
    public boolean isPalindrome(int x) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if( x < 0 ){
            return false;
        }else if( x == 0){
            return true;
        }
        number y = new number(x);
        return isWithRec(x,y);
    }
    
    //solution with transform to string
    // space O(n)
    boolean isWithStr(int x){

        StringBuffer str = new StringBuffer();
        while(x > 0 ){
            str.append(x % 10);
            x = x / 10;
        }
        int low = 0;
        int high = str.length() -1;
        while(low < high){
            if(str.charAt(low) != str.charAt(high)){
                return false;
            }
            low++;high--;
        }
        return true;
    }
    
    //solution with no extra space
    
    boolean isWithNoExtra(int x){
        int pos = 1;
        int tmp = x;
        while(tmp >= 10){
            pos *= 10;
            tmp /= 10;
        }
        while(x >= 10){
            if( x / pos != x % 10){
                return false;
            }
            x = x % pos / 10;
            pos /= 100;
        }
        return true;
    }
    
    //solution with just one traverse
    //for some un palindrome number, it maybe overflow 
    // but the results is correct
    boolean isWithOne(int x){
        int tmpx = 0;
        int t = x;
        while(x > 0){
            tmpx = tmpx * 10 + x % 10;
            x /= 10;
        }
        return tmpx == t;
    }
    
    class number{
        int y;
        public number(int t){
            this.y = t;
        }
    }
    
    ///solve with recurrence
    boolean isWithRec(int x,number y){
       if(x == 0){
           return true;
       }
       if(isWithRec(x/10,y) && (x % 10 == y.y % 10)){
           y.y = y.y / 10;
           return true;
       }else{
           return false;
       }
    }   
}