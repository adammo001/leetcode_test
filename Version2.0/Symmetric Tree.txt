Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:

    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

=================================

just recurrence solution

Solution:

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(root == null){
            return true;
        }
        return match(root.left,root.right);
    }
    
    Boolean match(TreeNode left, TreeNode right){
        if(left == null){
            return right == null;
        }
        if(right == null){
            return left == null;
        }
        if(left.val != right.val){
            return false;
        }
        return match(left.left,right.right) && match(left.right,right.left);
    }
}